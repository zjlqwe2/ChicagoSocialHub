import { Component, Input, NgModule, ViewChild } from '@angular/core';
import { CommonModule } from '@angular/common';
import { create } from 'heatmap.js';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var HeatMapComponent = (function () {
    function HeatMapComponent() {
        this.height = 400;
        this.width = 400;
    }
    Object.defineProperty(HeatMapComponent.prototype, "configurations", {
        get: /**
         * @return {?}
         */
        function () {
            return this.configs;
        },
        set: /**
         * @param {?} config
         * @return {?}
         */
        function (config) {
            if (!config) {
                this.configs = {
                    container: this.heatMapDiv.nativeElement,
                };
                return;
            }
            this.configs = config;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HeatMapComponent.prototype, "heatPoints", {
        set: /**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            this.data = data;
            if (this.heatMapInstance) {
                this.heatMapInstance = this.heatMapInstance.setData(data);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HeatMapComponent.prototype, "maxDataPoints", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.dataMax = value;
            if (this.heatMapInstance) {
                this.heatMapInstance = this.heatMapInstance.setDataMax(value);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HeatMapComponent.prototype, "minDataPoints", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.dataMin = value;
            if (this.heatMapInstance) {
                this.heatMapInstance = this.heatMapInstance.setDataMin(value);
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    HeatMapComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    HeatMapComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        // if (this.heatMapInstance) {
        //   this.heatMapInstance = heatmap.repaint().setData(this.data);
        // }
    };
    /**
     * @return {?}
     */
    HeatMapComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.heatMapInstance = create({
            container: this.heatMapDiv.nativeElement,
        }).setData(this.data);
        // this.heatMapInstance.setData(this.data);
        // this.heatMapInstance.setDataMax(this.dataMax);
        // this.heatMapInstance.setDataMin(this.dataMin);
    };
    /**
     * @param {?} point
     * @return {?}
     */
    HeatMapComponent.prototype.addPoint = /**
     * @param {?} point
     * @return {?}
     */
    function (point) {
        this.heatMapInstance = this.heatMapInstance.addData(point);
    };
    HeatMapComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ngx-heatmap',
                    template: "<div #heatMap [style.width.px]=\"width? width: 500\" [style.height.px]=\"height? height: 500\"></div>"
                },] },
    ];
    // private createHeatMap(): any {
    //   if (!this.heatMapInstance) {
    //     const heatMapInstance = heatmap.create({
    //       container: this.heatMapDiv.nativeElement
    //     });
    //     return heatMapInstance;
    //   } else {
    //     return this.heatMapInstance;
    //   }
    // }
    /** @nocollapse */
    HeatMapComponent.ctorParameters = function () { return []; };
    HeatMapComponent.propDecorators = {
        "heatMapDiv": [{ type: ViewChild, args: ['heatMap',] },],
        "height": [{ type: Input },],
        "width": [{ type: Input },],
        "configurations": [{ type: Input },],
        "heatPoints": [{ type: Input },],
        "maxDataPoints": [{ type: Input },],
        "minDataPoints": [{ type: Input },],
    };
    return HeatMapComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var NgxHeatMapModule = (function () {
    function NgxHeatMapModule() {
    }
    /**
     * @return {?}
     */
    NgxHeatMapModule.forRoot = /**
     * @return {?}
     */
    function () {
        return {
            ngModule: NgxHeatMapModule
        };
    };
    NgxHeatMapModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule
                    ],
                    declarations: [
                        HeatMapComponent
                    ],
                    exports: [
                        HeatMapComponent
                    ]
                },] },
    ];
    /** @nocollapse */
    NgxHeatMapModule.ctorParameters = function () { return []; };
    return NgxHeatMapModule;
}());

export { NgxHeatMapModule, HeatMapComponent };
