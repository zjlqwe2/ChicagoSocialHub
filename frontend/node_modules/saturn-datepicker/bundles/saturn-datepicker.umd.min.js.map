{"version":3,"sources":["ng://saturn-datepicker/datetime/date-adapter.ts","ng://saturn-datepicker/datetime/date-formats.ts","node_modules/tslib/tslib.es6.js","ng://saturn-datepicker/datetime/native-date-adapter.ts","ng://saturn-datepicker/datetime/native-date-formats.ts","ng://saturn-datepicker/datetime/index.ts","ng://saturn-datepicker/datepicker/datepicker-errors.ts","ng://saturn-datepicker/datepicker/datepicker-intl.ts","ng://saturn-datepicker/datepicker/calendar-body.ts","ng://saturn-datepicker/datepicker/month-view.ts","ng://saturn-datepicker/datepicker/multi-year-view.ts","ng://saturn-datepicker/datepicker/year-view.ts","ng://saturn-datepicker/datepicker/calendar.ts","ng://saturn-datepicker/datepicker/datepicker-animations.ts","ng://saturn-datepicker/datepicker/datepicker.ts","ng://saturn-datepicker/datepicker/datepicker-input.ts","ng://saturn-datepicker/datepicker/datepicker-toggle.ts","ng://saturn-datepicker/datepicker/datepicker-module.ts"],"names":["MAT_DATE_LOCALE","InjectionToken","providedIn","factory","MAT_DATE_LOCALE_FACTORY","inject","LOCALE_ID","MAT_DATE_LOCALE_PROVIDER","provide","useExisting","Object","defineProperty","DateAdapter","prototype","this","_localeChanges","deserialize","value","isDateInstance","isValid","invalid","setLocale","locale","next","compareDate","first","second","getYear","getMonth","getDate","sameDate","firstValid","secondValid","clampDate","date","min","max","Subject","MAT_DATE_FORMATS","extendStatics","d","b","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","constructor","create","SUPPORTS_INTL_API","__assign","assign","t","s","i","n","arguments","length","call","apply","Intl","_a","DEFAULT_MONTH_NAMES","long","short","narrow","DEFAULT_DATE_NAMES","range","String","DEFAULT_DAY_OF_WEEK_NAMES","FIRST_DAY_OF_WEEK","af","ar","ar-ly","ar-ma","ar-tn","az","be","bg","bm","br","bs","ca","cs","cv","cy","da","de","de-at","de-ch","el","en-au","en-gb","en-ie","en-nz","eo","es","es-do","et","eu","fa","fi","fo","fr","fr-ch","fy","gd","gl","gom-latn","hr","hu","hy-am","id","is","it","jv","ka","kk","km","ky","lb","lt","lv","me","mi","mk","ms","ms-my","mt","my","nb","nl","nl-be","nn","pl","pt","pt-BR","ro","ru","sd","se","sk","sl","sq","sr","sr-cyrl","ss","sv","sw","tet","tg","tl-ph","tlh","tr","tzl","tzm","tzm-latn","ug-cn","uk","ur","uz","uz-latn","vi","x-pseudo","yo","zh-cn","ISO_8601_REGEX","valueFunction","valuesArray","_super","NativeDateAdapter","tslib_1.__extends","getFullYear","getDayOfWeek","getDay","getMonthNames","style","_this","dtf_1","DateTimeFormat","month","timeZone","_stripDirectionalityCharacters","_format","Date","getDateNames","dtf_2","day","getDayOfWeekNames","dtf_3","weekday","getYearName","dtf","year","getFirstDayOfWeek","toLowerCase","substr","getNumDaysInMonth","_createDateWithOverflow","clone","getTime","createDate","Error","result","today","parse","format","displayFormat","_clampDate","setFullYear","Math","toDateString","addCalendarYears","years","addCalendarMonths","months","newDate","addCalendarDays","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","join","test","obj","isNaN","NaN","slice","str","replace","UTC","getHours","getMinutes","getSeconds","getMilliseconds","Injectable","Optional","type","Inject","args","Platform","matDateLocale","platform","useUtcForDisplay","TRIDENT","EDGE","MAT_NATIVE_DATE_FORMATS","dateInput","display","monthYearLabel","dateA11yLabel","monthYearA11yLabel","NgModule","imports","PlatformModule","providers","useClass","NativeDateModule","SatNativeDateModule","useValue","Éµ0$1","createMissingDateImplError","provider","SatDatepickerIntl","changes","calendarLabel","openCalendarLabel","prevMonthLabel","nextMonthLabel","prevYearLabel","nextYearLabel","prevMultiYearLabel","nextMultiYearLabel","switchToMonthViewLabel","switchToMultiYearViewLabel","SatCalendarCell","displayValue","ariaLabel","enabled","cssClasses","SatCalendarBody","_cellClicked","cell","selectedValueChange","emit","_mouseOverCell","_cellOver","ngOnChanges","columnChanges","rows","numCols","_firstRowOffset","_cellPadding","cellAspectRatio","_cellWidth","activeCell","_isActiveCell","rowIndex","colIndex","cellNumber","_isSemiSelected","rangeMode","rangeFull","begin","end","_isBetweenOverAndBegin","beginSelected","isBeforeSelected","_isBegin","_isEnd","_focusActiveCell","_ngZone","runOutsideAngular","onStable","asObservable","pipe","take","subscribe","_elementRef","nativeElement","querySelector","focus","_previewCellOver","Component","moduleId","module","selector","template","host","class","role","aria-readonly","exportAs","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","ElementRef","NgZone","Input","Output","EventEmitter","SatMonthView","_beginDate","_getValidDateOrNull","_dateAdapter","updateRangeSpecificValues","_endDate","_beginDateSelected","_activeDate","oldActiveDate","validDate","minDate","maxDate","_hasSameMonthAndYear","_init","_selected","_selectedDate","_getDateInCurrentMonth","_minDate","_maxDate","ngAfterContentInit","_dateSelected","selectedYear","activeDate","selectedMonth","selectedDate","selectedChange","_userSelection","_createWeekCells","_handleCalendarBodyKeydown","event","isRtl","_isRtl","keyCode","LEFT_ARROW","RIGHT_ARROW","UP_ARROW","DOWN_ARROW","HOME","END","PAGE_UP","altKey","PAGE_DOWN","ENTER","SPACE","dateFilter","closeAfterSelection","preventDefault","activeDateChange","selected","_todayDate","_monthLabel","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","_changeDetectorRef","markForCheck","_matCalendarBody","daysInMonth","dateNames","_weeks","push","_shouldEnableDate","_dateFormats","cellClasses","dateClass","undefined","d1","d2","_dir","_beginDateNumber","_endDateNumber","_rangeFull","beginDate","endDate","ChangeDetectorRef","decorators","Directionality","ViewChild","firstDayOfWeek","narrowWeekdays","weekdays","map","_weekdays","concat","yearsPerPage","SatMultiYearView","floor","_selectedYear","_todayYear","activeYear","activeOffset","_years","row","_createCellForYear","_yearSelected","yearSelected","_getActiveCell","yearName","_shouldEnableYear","SatYearView","_selectedMonth","_getMonthInCurrentYear","_monthSelected","normalizedDate","monthSelected","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","_shouldEnableMonth","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","maxYear","maxMonth","minYear","minMonth","SatCalendarHeader","calendar","currentView","_intl","multi-year","currentPeriodClicked","orderPeriod","orderPeriodLabel","previousClicked","nextClicked","previousEnabled","_isSameView","nextEnabled","date1","date2","SatCalendar","forwardRef","changeDetectorRef","stateChanges","SatCalendarFooter","_startAt","_clampedActiveDate","_currentView","_moveFocusOnNextTick","_calendarHeaderPortal","ComponentPortal","headerComponent","_calendarFooterPortal","footerComponent","startAt","startView","ngAfterViewChecked","focusActiveCell","ngOnDestroy","_intlChanges","unsubscribe","complete","change","firstChange","view","_getCurrentViewComponent","detectChanges","updateTodaysDate","monthView","yearView","multiYearView","beginDateSelected","dateRangesChange","beginDateSelectedChange","_yearSelectedInMultiYearView","normalizedYear","_monthSelectedInYearView","normalizedMonth","_userSelected","_goToDateInView","matDatepickerAnimations","transformPanel","trigger","state","opacity","transform","transition","animate","fadeInCalendar","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY","overlay","scrollStrategies","reposition","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","deps","Overlay","useFactory","_SatDatepickerContentMixinBase","mixinColor","SatDatepickerContentBase","SatDatepickerContent","ngAfterViewInit","_calendar","close","datepicker","[@transformPanel]","[class.mat-datepicker-content-touch]","animations","inputs","elementRef","SatDatepicker","_rangeMode","mode","_validSelected","_datepickerInput","_color","_getThemePalette","_touchUi","coerceBooleanProperty","_disabled","disabled","newValue","_disabledChange","_opened","open","_dateFilter","_inputSubscription","_popupRef","dispose","_popupComponentRef","select","oldValue","_selectedChanged","_selectRange","dates","_selectYear","_selectMonth","_registerInput","input","_valueChange","_document","_focusedElementBeforeOpen","activeElement","touchUi","_openAsDialog","_openAsPopup","openedStream","hasAttached","detach","_dialogRef","_calendarPortal","isAttached","selectFirstDateOnClose","completeClose","closedStream","setTimeout","setBeginDateSelected","_dialog","direction","viewContainerRef","_viewContainerRef","panelClass","afterClosed","componentInstance","_setColor","_createPopup","attach","instance","updatePosition","overlayConfig","OverlayConfig","positionStrategy","_createPopupPositionStrategy","hasBackdrop","backdropClass","scrollStrategy","_scrollStrategy","_overlay","overlayElement","setAttribute","merge","backdropClick","detachments","keydownEvents","filter","ESCAPE","position","flexibleConnectedTo","getConnectedOverlayOrigin","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","withLockedPosition","withPositions","originX","originY","overlayX","overlayY","color","MatDialog","ViewContainerRef","DOCUMENT","Subscription","EMPTY","MAT_DATEPICKER_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","SatDatepickerInput","multi","MAT_DATEPICKER_VALIDATORS","NG_VALIDATORS","SatDatepickerInputEvent","target","targetElement","_datepicker","_datepickerSubscription","_cvaOnChange","_onTouched","dateChange","_validatorOnChange","_value","rangeValue","_lastValueValid","oldDate","_min","_max","element","blur","_localeSubscription","registerOnValidatorChange","fn","validate","c","_validator","getPopupConnectionElementRef","_formField","writeValue","registerOnChange","registerOnTouched","setDisabledState","isDisabled","_onKeydown","isAltDownArrow","readOnly","_onInput","parts","split","beginDateString","endDateString","_onChange","_onBlur","_formatValue","Directive","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.aria-owns]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","(blur)","(keydown)","MatFormField","_parseValidator","matDatepickerParse","text","_minValidator","control","matDatepickerMin","actual","controlValue","_maxValidator","matDatepickerMax","_filterValidator","matDatepickerFilter","_rangeValidator","matDatepickerRange","Validators","compose","localeChanges","SatDatepickerToggleIcon","SatDatepickerToggle","_watchStateChanges","_stateChanges","_open","stopPropagation","datepickerDisabled","observableOf","inputDisabled","datepickerToggled","[attr.tabindex]","[class.mat-datepicker-toggle-active]","[class.mat-accent]","[class.mat-warn]","(focus)","Attribute","ContentChild","defaultTabIndex","parsedTabIndex","Number","tabIndex","CommonModule","MatButtonModule","MatDialogModule","OverlayModule","A11yModule","PortalModule","exports","declarations","entryComponents","SatDatepickerModule"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE', {\n  providedIn: 'root',\n  factory: MAT_DATE_LOCALE_FACTORY,\n});\n\n/** @docs-private */\nexport function MAT_DATE_LOCALE_FACTORY(): string {\n  return inject(LOCALE_ID);\n}\n\n/**\n * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.\n * If you are importing and providing this in your code you can simply remove it.\n * @deprecated\n * @breaking-change 8.0.0\n */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges = new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<sat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nlet SUPPORTS_INTL_API: boolean;\n\n// We need a try/catch around the reference to `Intl`, because accessing it in some cases can\n// cause IE to throw. These cases are tied to particular versions of Windows and can happen if\n// the consumer is providing a polyfilled `Map`. See:\n// https://github.com/Microsoft/ChakraCore/issues/3189\n// https://github.com/angular/material2/issues/15687\ntry {\n  SUPPORTS_INTL_API = typeof Intl != 'undefined';\n} catch {\n  SUPPORTS_INTL_API = false;\n}\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n/** First day of week according locale.\n * Taken form moment.js source code https://github.com/moment/moment/tree/develop/src/locale\n */\nconst FIRST_DAY_OF_WEEK = {\n  af:1, ar:6, 'ar-ly':6, 'ar-ma':6, 'ar-tn':1, az:1, be:1, bg:1, bm:1, br:1, bs:1, ca:1, cs:1, cv:1,\n  cy:1, da:1, de:1, 'de-at':1, 'de-ch':1, el:1, 'en-au':1, 'en-gb':1, 'en-ie':1, 'en-nz':1, eo:1,\n  es:1, 'es-do':1, et:1, eu:1, fa:6, fi:1, fo:1, fr:1, 'fr-ch':1, fy:1, gd:1, gl:1, 'gom-latn':1,\n  hr:1, hu:1, 'hy-am':1, id:1, is:1, it:1, jv:1, ka:1, kk:1, km:1, ky:1, lb:1, lt:1, lv:1, me:1,\n  mi:1, mk:1, ms:1, 'ms-my':1, mt:1, my:1, nb:1, nl:1, 'nl-be':1, nn:1, pl:1, pt:1, 'pt-BR': 0, ro:1, ru:1,\n  sd:1, se:1, sk:1, sl:1, sq:1, sr:1, 'sr-cyrl':1, ss:1, sv:1, sw:1, 'tet':1, tg:1, 'tl-ph':1,\n  'tlh':1, tr:1, 'tzl':1, 'tzm':6, 'tzm-latn':6, 'ug-cn':1, uk:1, ur:1, uz:1, 'uz-latn':1, vi:1,\n  'x-pseudo':1, yo:1, 'zh-cn':1,\n};\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   *\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n   * getting the string representation of a Date object from it's utc representation. We're keeping\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\n   * though.\n   */\n  useUtcForDisplay: boolean = true;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    this.useUtcForDisplay = !platform.TRIDENT;\n    this._clampDate = platform.TRIDENT || platform.EDGE;\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n      return range(12, i =>\n          this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n      return range(7, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is.\n    // Sometimes people use excess language definition, e.g. ru-RU,\n    // so we use fallback to two-letter language code\n    const locale = this.locale.toLowerCase();\n    return FIRST_DAY_OF_WEEK[locale] || FIRST_DAY_OF_WEEK[locale.substr(0, 2)] || 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return new Date(date.getTime());\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = {...displayFormat, timeZone: 'utc'};\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    const result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    const d = new Date(Date.UTC(\n        date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n        date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    return dtf.format(d);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n    imports: [PlatformModule],\n    providers: [\n        {provide: DateAdapter, useClass: NativeDateAdapter},\n    ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n    imports: [NativeDateModule],\n    providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class SatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n    return Error(\n        `SatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n        `modules at your application root: SatNativeDateModule, MatMomentDateModule, or provide a ` +\n        `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({providedIn: 'root'})\nexport class SatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  NgZone,\n  OnChanges,\n  SimpleChanges,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\n\n/**\n * Extra CSS classes that can be associated with a calendar cell.\n */\nexport type SatCalendarCellCssClasses = string | string[] | Set<string> | {[key: string]: any};\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class SatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean,\n              public cssClasses?: SatCalendarCellCssClasses) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[sat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SatCalendarBody implements OnChanges {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: SatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The value in the table since range of dates started.\n   * Null means no interval or interval doesn't start in this month\n   */\n  @Input() begin: number|null;\n\n  /** The value in the table representing end of dates range.\n   * Null means no interval or interval doesn't end in this month\n   */\n  @Input() end: number|null;\n\n  /** Whenever user already selected start of dates interval. */\n  @Input() beginSelected: boolean;\n\n  /** Whenever the current month is before the date already selected */\n  @Input() isBeforeSelected: boolean;\n\n  /** Whether to mark all dates as semi-selected. */\n  @Input() rangeFull: boolean;\n\n  /** Whether to use date range selection behaviour.*/\n  @Input() rangeMode = false;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  _firstRowOffset: number;\n\n  /** Padding for the individual date cells. */\n  _cellPadding: string;\n\n  /** Width of an individual cell. */\n  _cellWidth: string;\n\n  /** The cell number of the hovered cell */\n  _cellOver: number;\n\n  constructor(private _elementRef: ElementRef<HTMLElement>, private _ngZone: NgZone) { }\n\n  _cellClicked(cell: SatCalendarCell): void {\n    if (cell.enabled) {\n      this.selectedValueChange.emit(cell.value);\n    }\n  }\n\n  _mouseOverCell(cell: SatCalendarCell): void {\n    this._cellOver = cell.value;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const columnChanges = changes['numCols'];\n    const {rows, numCols} = this;\n\n    if (changes['rows'] || columnChanges) {\n      this._firstRowOffset = rows && rows.length && rows[0].length ? numCols - rows[0].length : 0;\n    }\n\n    if (changes['cellAspectRatio'] || columnChanges || !this._cellPadding) {\n      this._cellPadding = `${50 * this.cellAspectRatio / numCols}%`;\n    }\n\n    if (columnChanges || !this._cellWidth) {\n      this._cellWidth = `${100 / numCols}%`;\n    }\n\n    if (changes.activeCell) {\n      this._cellOver = this.activeCell + 1;\n    }\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  /** Whenever to mark cell as semi-selected (inside dates interval). */\n  _isSemiSelected(date: number) {\n    if (!this.rangeMode) {\n      return false;\n    }\n    if (this.rangeFull) {\n      return true;\n    }\n    /** Do not mark start and end of interval. */\n    if (date === this.begin || date === this.end) {\n      return false;\n    }\n    if (this.begin && !this.end) {\n      return date > this.begin;\n    }\n    if (this.end && !this.begin) {\n      return date < this.end;\n    }\n    return date > <number>this.begin && date < <number>this.end;\n  }\n\n  /** Whenever to mark cell as semi-selected before the second date is selected (between the begin cell and the hovered cell). */\n  _isBetweenOverAndBegin(date: number): boolean {\n    if (!this._cellOver || !this.rangeMode || !this.beginSelected) {\n      return false;\n    }\n    if (this.isBeforeSelected && !this.begin) {\n      return date > this._cellOver;\n    }\n    if (this._cellOver > this.begin) {\n      return date > this.begin && date < this._cellOver;\n    }\n    if (this._cellOver < this.begin) {\n      return date < this.begin && date > this._cellOver;\n    }\n    return false;\n  }\n\n  /** Whenever to mark cell as begin of the range. */\n  _isBegin(date: number): boolean {\n    if (this.rangeMode && this.beginSelected && this._cellOver) {\n      if (this.isBeforeSelected && !this.begin) {\n        return this._cellOver === date;\n      } else {\n        return (this.begin === date && !(this._cellOver < this.begin)) ||\n          (this._cellOver === date && this._cellOver < this.begin)\n      }\n    }\n    return this.begin === date;\n  }\n\n  /** Whenever to mark cell as end of the range. */\n  _isEnd(date: number): boolean {\n    if (this.rangeMode && this.beginSelected && this._cellOver) {\n      if (this.isBeforeSelected && !this.begin) {\n        return false;\n      } else {\n        return (this.end === date && !(this._cellOver > this.begin)) ||\n          (this._cellOver === date && this._cellOver > this.begin)\n      }\n    }\n    return this.end === date;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        const activeCell: HTMLElement | null =\n            this._elementRef.nativeElement.querySelector('.mat-calendar-body-active');\n\n        if (activeCell) {\n          activeCell.focus();\n        }\n      });\n    });\n  }\n\n  /** Whenever to highlight the target cell when selecting the second date in range mode */\n  _previewCellOver(date: number): boolean {\n    return this._cellOver === date && this.rangeMode && this.beginSelected;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DateAdapter} from '../datetime/date-adapter';\nimport {MAT_DATE_FORMATS, MatDateFormats} from '../datetime/date-formats';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {SatCalendarBody, SatCalendarCell, SatCalendarCellCssClasses} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'sat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SatMonthView<D> implements AfterContentInit {\n\n  /** Current start of interval. */\n  @Input()\n  get beginDate(): D | null { return this._beginDate; }\n  set beginDate(value: D | null) {\n    this._beginDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this.updateRangeSpecificValues();\n  }\n  private _beginDate: D | null;\n\n  /** Current end of interval. */\n  @Input()\n  get endDate(): D | null { return this._endDate; }\n  set endDate(value: D | null) {\n    this._endDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this.updateRangeSpecificValues();\n  }\n  private _endDate: D | null;\n\n  /** Allow selecting range of dates. */\n  @Input() rangeMode = false;\n\n  /** Enables datepicker closing after selection */\n  @Input() closeAfterSelection = true;\n\n  /** First day of interval. */\n  _beginDateNumber: number | null;\n\n  /* Last day of interval. */\n  _endDateNumber: number | null;\n\n  /** Whenever full month is inside dates interval. */\n  _rangeFull: boolean | null = false;\n\n  /** Whenever user already selected start of dates interval. */\n  @Input() set beginDateSelected(value: D | null) { this._beginDateSelected = value } ;\n\n  /** Whenever user already selected start of dates interval. An inner property that avoid asynchronous problems */\n  _beginDateSelected: D | null;\n\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** Function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => SatCalendarCellCssClasses;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(SatCalendarBody) _matCalendarBody: SatCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: SatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n\n    if (this.rangeMode) {\n\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n      if (!this._beginDateSelected) { // At first click emit the same start and end of interval\n        this._beginDateSelected = selectedDate;\n        this.selectedChange.emit(selectedDate);\n      } else {\n        this._beginDateSelected = null;\n        this.selectedChange.emit(selectedDate);\n        this._userSelection.emit();\n      }\n      this._createWeekCells();\n      this.activeDate = selectedDate;\n      this._focusActiveCell();\n    } else if (this._selectedDate != date) {\n\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n      this._userSelection.emit();\n      this._createWeekCells();\n    }\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n      case SPACE:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          if (!this._beginDateSelected) {\n            this._userSelection.emit();\n          }\n          if (this._beginDateSelected || !this.closeAfterSelection) {\n            this._focusActiveCell();\n          }\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this.updateRangeSpecificValues();\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates SatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      const cellClasses = this.dateClass ? this.dateClass(date) : undefined;\n\n      this._weeks[this._weeks.length - 1]\n          .push(new SatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled, cellClasses));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n  /** Updates range full parameter on each begin or end of interval update.\n   * Necessary to display calendar-body correctly\n   */\n  private updateRangeSpecificValues(): void {\n    if (this.rangeMode) {\n      this._beginDateNumber = this._getDateInCurrentMonth(this._beginDate);\n      this._endDateNumber = this._getDateInCurrentMonth(this._endDate);\n      this._rangeFull = this.beginDate && this.endDate && !this._beginDateNumber &&\n        !this._endDateNumber &&\n        this._dateAdapter.compareDate(this.beginDate, this.activeDate) <= 0 &&\n        this._dateAdapter.compareDate(this.activeDate, this.endDate) <= 0;\n    } else {\n      this._beginDateNumber = this._endDateNumber = null;\n      this._rangeFull = false;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {SatCalendarBody, SatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {DateAdapter} from '../datetime/date-adapter';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'sat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(SatCalendarBody) _matCalendarBody: SatCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: SatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n      case SPACE:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an SatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new SatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {SatCalendarBody, SatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {DateAdapter} from '../datetime/date-adapter';\nimport {MAT_DATE_FORMATS, MatDateFormats} from '../datetime/date-formats';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'sat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(SatCalendarBody) _matCalendarBody: SatCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: SatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n      case SPACE:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an SatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new SatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentPortal, ComponentType, Portal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {SatDatepickerIntl} from './datepicker-intl';\nimport {SatMonthView} from './month-view';\nimport {SatMultiYearView, yearsPerPage} from './multi-year-view';\nimport {SatYearView} from './year-view';\nimport {SatCalendarCellCssClasses} from './calendar-body';\n\nimport {SatDatepickerRangeValue} from './datepicker-input';\nimport {DateAdapter} from '../datetime/date-adapter';\nimport {MAT_DATE_FORMATS, MatDateFormats} from '../datetime/date-formats';\n\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport type SatCalendarView = 'month' | 'year' | 'multi-year';\n\n/** Default header for SatCalendar */\n@Component({\n  moduleId: module.id,\n  selector: 'sat-calendar-header',\n  templateUrl: 'calendar-header.html',\n  exportAs: 'matCalendarHeader',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SatCalendarHeader<D> {\n  constructor(private _intl: SatDatepickerIntl,\n              @Inject(forwardRef(() => SatCalendar)) public calendar: SatCalendar<D>,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  /** The label for the current calendar view. */\n  get periodButtonText(): string {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter\n          .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n              .toLocaleUpperCase();\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get periodButtonLabel(): string {\n    return this.calendar.currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the the previous button. */\n  get prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** The label for the the next button. */\n  get nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** Handles user clicks on the period label.\n   * Option`calendar.orderPeriodLabel` sort the label period views.\n   * - Default [multi-year]: multi-year then back to month\n   * - Month [month]: month > year > multi-year\n   */\n  currentPeriodClicked(): void {\n    const mouthFirstOrder: SatCalendarView[] = ['month', 'year', 'multi-year'];\n    const defaultOrder: SatCalendarView[] = ['month', 'multi-year', 'month'];\n    const orderPeriod = this.calendar.orderPeriodLabel === 'month' ? mouthFirstOrder : defaultOrder;\n    switch (this.calendar.currentView) {\n      case 'month':\n        this.calendar.currentView = orderPeriod[1];\n        break;\n      case 'year':\n          this.calendar.currentView = orderPeriod[2]\n          break;\n      default:\n        this.calendar.currentView = orderPeriod[0]\n        break;\n    }\n  }\n\n  /** Handles user clicks on the previous button. */\n  previousClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage\n            );\n  }\n\n  /** Handles user clicks on the next button. */\n  nextClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                    this.calendar.currentView == 'year' ? 1 : yearsPerPage\n            );\n  }\n\n  /** Whether the previous period button is enabled. */\n  previousEnabled(): boolean {\n    if (!this.calendar.minDate) {\n      return true;\n    }\n    return !this.calendar.minDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  nextEnabled(): boolean {\n    return !this.calendar.maxDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n}\n\n/** Default footer for SatCalendar */\n@Component({\n  moduleId: module.id,\n  selector: 'sat-calendar-footer',\n  templateUrl: 'calendar-footer.html',\n  exportAs: 'matCalendarFooter',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SatCalendarFooter<D> {\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'sat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SatCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n\n    /** Beginning of date range. */\n    @Input()\n    get beginDate(): D | null { return this._beginDate; }\n    set beginDate(value: D | null) {\n        this._beginDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n    private _beginDate: D | null;\n\n    /** Date range end. */\n    @Input()\n    get endDate(): D | null { return this._endDate; }\n    set endDate(value: D | null) {\n        this._endDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n    private _endDate: D | null;\n\n    /** Whenever datepicker is for selecting range of dates. */\n    @Input() rangeMode = false;\n\n    /** Enables datepicker closing after selection */\n    @Input() closeAfterSelection = true;\n\n    /** Emits when new pair of dates selected. */\n    @Output() dateRangesChange = new EventEmitter<SatDatepickerRangeValue<D>>();\n\n\n    /** Whenever user already selected start of dates interval. */\n    beginDateSelected: D | boolean = false;\n\n    /** Emits when a new start date has been selected in range mode. */\n    @Output() beginDateSelectedChange = new EventEmitter<D>();\n\n    /** An input indicating the type of the header component, if set. */\n  @Input() headerComponent: ComponentType<any>;\n\n  /** A portal containing the header component type for this calendar. */\n  _calendarHeaderPortal: Portal<any>;\n\n  /** An input indicating the type of the footer component, if set. */\n  @Input() footerComponent: ComponentType<any>;\n\n  /** A portal containing the footer component type for this calendar. */\n  _calendarFooterPortal: Portal<any>;\n\n  private _intlChanges: Subscription;\n\n  /**\n   * Used for scheduling that focus should be moved to the active cell on the next tick.\n   * We need to schedule it, rather than do it immediately, because we have to wait\n   * for Angular to re-evaluate the view children.\n   */\n  private _moveFocusOnNextTick = false;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: SatCalendarView = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** Function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => SatCalendarCellCssClasses;\n\n  /** Order the views when clicking on period label button */\n  @Input() orderPeriodLabel: 'multi-year' | 'month' = 'multi-year';\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(SatMonthView) monthView: SatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(SatYearView) yearView: SatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(SatMultiYearView) multiYearView: SatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get activeDate(): D { return this._clampedActiveDate; }\n  set activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n    this.stateChanges.next();\n    this._changeDetectorRef.markForCheck();\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  get currentView(): SatCalendarView { return this._currentView; }\n  set currentView(value: SatCalendarView) {\n    this._currentView = value;\n    this._moveFocusOnNextTick = true;\n    this._changeDetectorRef.markForCheck();\n  }\n  private _currentView: SatCalendarView;\n\n  /**\n   * Emits whenever there is a state change that the header may need to respond to.\n   */\n  stateChanges = new Subject<void>();\n\n  constructor(_intl: SatDatepickerIntl,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => {\n      _changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    });\n  }\n\n  ngAfterContentInit() {\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || SatCalendarHeader);\n    this._calendarFooterPortal = new ComponentPortal(this.footerComponent || SatCalendarFooter);\n    this.activeDate = this.startAt || this._dateAdapter.today();\n\n    // Assign to the private property since we don't want to move focus on init.\n    this._currentView = this.startView;\n  }\n\n  ngAfterViewChecked() {\n    if (this._moveFocusOnNextTick) {\n      this._moveFocusOnNextTick = false;\n      this.focusActiveCell();\n    }\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n    this.stateChanges.complete();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change =\n        changes['minDate'] || changes['maxDate'] || changes['dateFilter'];\n\n    if (change && !change.firstChange) {\n      const view = this._getCurrentViewComponent();\n\n      if (view) {\n        // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\n        // passed down to the view via data bindings which won't be up-to-date when we call `_init`.\n        this._changeDetectorRef.detectChanges();\n        view._init();\n      }\n    }\n\n    this.stateChanges.next();\n  }\n\n  focusActiveCell() {\n    this._getCurrentViewComponent()._focusActiveCell();\n  }\n\n  /** Updates today's date after an update of the active date */\n  updateTodaysDate() {\n    let view = this.currentView == 'month' ? this.monthView :\n            (this.currentView == 'year' ? this.yearView : this.multiYearView);\n\n    view.ngAfterContentInit();\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (this.rangeMode) {\n        if (!this.beginDateSelected) {\n          this.beginDateSelected = date;\n          this.beginDate = date;\n          this.endDate = date;\n          this.beginDateSelectedChange.emit(date);\n        } else {\n          this.beginDateSelected = false;\n          if (this._dateAdapter.compareDate(<D>this.beginDate, date) <= 0) {\n            this.endDate = date;\n          } else {\n            this.endDate = this.beginDate;\n            this.beginDate = date;\n          }\n          this.dateRangesChange.emit({begin: <D>this.beginDate, end: this.endDate});\n        }\n    } else if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this.activeDate = date;\n    this.currentView = view;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Returns the component instance that corresponds to the current calendar view. */\n  private _getCurrentViewComponent() {\n    return this.monthView || this.yearView || this.multiYearView;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material datepicker.\n * @docs-private\n */\nexport const matDatepickerAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(1, 0.8)'\n    })),\n    transition('void => enter',  animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n      opacity: 1,\n      transform: 'scale(1, 1)'\n    }))),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ]),\n\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: trigger('fadeInCalendar', [\n    state('void', style({opacity: 0})),\n    state('enter', style({opacity: 1})),\n\n    // TODO(crisbeto): this animation should be removed since it isn't quite on spec, but we\n    // need to keep it until #12440 gets in, otherwise the exit animation will look glitchy.\n    transition('void => *', animate('120ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  mixinColor,\n  ThemePalette,\n} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {merge, Subject, Subscription} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {SatCalendar} from './calendar';\nimport {matDatepickerAnimations} from './datepicker-animations';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {SatCalendarCellCssClasses} from './calendar-body';\nimport {SatDatepickerInput, SatDatepickerRangeValue} from './datepicker-input';\nimport {DateAdapter} from '../datetime/date-adapter';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('sat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY,\n};\n\n// Boilerplate for applying mixins to SatDatepickerContent.\n/** @docs-private */\nexport class SatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nexport const _SatDatepickerContentMixinBase: CanColorCtor & typeof SatDatepickerContentBase =\n    mixinColor(SatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * SatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'sat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[@transformPanel]': '\"enter\"',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  animations: [\n    matDatepickerAnimations.transformPanel,\n    matDatepickerAnimations.fadeInCalendar,\n  ],\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class SatDatepickerContent<D> extends _SatDatepickerContentMixinBase\n  implements AfterViewInit, CanColor {\n\n  /** Reference to the internal calendar component. */\n  @ViewChild(SatCalendar) _calendar: SatCalendar<D>;\n\n  /** Reference to the datepicker that created the overlay. */\n  datepicker: SatDatepicker<D>;\n\n  /** Whether the datepicker is above or below the input. */\n  _isAbove: boolean;\n\n  constructor(elementRef: ElementRef) {\n    super(elementRef);\n  }\n\n  ngAfterViewInit() {\n    this._calendar.focusActiveCell();\n  }\n\n  close() {\n    if (this.datepicker.closeAfterSelection) {\n      this.datepicker.close();\n    }\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'sat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class SatDatepicker<D> implements OnDestroy, CanColor {\n\n  /** Whenever datepicker is for selecting range of dates. */\n  @Input()\n  get rangeMode(): boolean {\n    return this._rangeMode;\n  }\n  set rangeMode(mode: boolean) {\n    this._rangeMode = mode;\n    if (this.rangeMode) {\n      this._validSelected = null;\n    } else {\n      this._beginDate = this._endDate = null;\n    }\n  }\n  private _rangeMode;\n\n  /** Start of dates interval. */\n  @Input()\n  get beginDate(): D | null { return this._beginDate; }\n  set beginDate(value: D | null) {\n    this._validSelected = null;\n    this._beginDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  _beginDate: D | null;\n\n  /** End of dates interval. */\n  @Input()\n  get endDate(): D | null { return this._endDate; }\n  set endDate(value: D | null) {\n    this._validSelected = null;\n    this._endDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  _endDate: D | null;\n\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** An input indicating the type of the custom header component for the calendar, if set. */\n  @Input() calendarHeaderComponent: ComponentType<any>;\n\n  /** An input indicating the type of the custom footer component for the calendar, if set. */\n  @Input() calendarFooterComponent: ComponentType<any>;\n\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    if (this.rangeMode) {\n      return this._startAt || (this._datepickerInput && this._datepickerInput.value ?\n        (<SatDatepickerRangeValue<D>>this._datepickerInput.value).begin : null);\n    }\n    return this._startAt || (this._datepickerInput ? <D|null>this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n        (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n  }\n  set color(value: ThemePalette) {\n    this._color = value;\n  }\n  _color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => SatCalendarCellCssClasses;\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Enables datepicker closing after selection */\n  @Input() closeAfterSelection = true;\n\n  /** In range mod, enable datepicker to select the first date selected as a one-day-range,\n   * if the user closes the picker before selecting another date\n   */\n  @Input() selectFirstDateOnClose = false;\n\n  /** Order the views when clicking on period label button */\n  @Input() orderPeriodLabel: 'month' | 'multi-year' = 'multi-year';\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `sat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<SatDatepickerContent<D>> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<SatDatepickerContent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<SatDatepickerContent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: SatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  /** Emits new selected date when selected date changes. */\n  readonly _selectedChanged = new Subject<SatDatepickerRangeValue<D>|D>();\n\n  /** The date already selected by the user in range mode. */\n  private _beginDateSelected: D | null;\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /** Selects the given date */\n  select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this._selectedChanged.next(date);\n    }\n  }\n\n\n  /** Selects the given date range */\n  _selectRange(dates: SatDatepickerRangeValue<D>): void {\n    this._beginDateSelected = null;\n    if (!this._dateAdapter.sameDate(dates.begin, this.beginDate) ||\n      !this._dateAdapter.sameDate(dates.end, this.endDate)) {\n      this._selectedChanged.next(dates);\n    }\n    this._beginDate = dates.begin;\n    this._endDate = dates.end;\n  }\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: SatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A SatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange\n          .subscribe((value: SatDatepickerRangeValue<D> | D | null) => {\n          if (value === null) {\n            this.beginDate = this.endDate = this._selected = null;\n            return;\n          }\n          if (value && value.hasOwnProperty('begin') && value.hasOwnProperty('end')) {\n            value = <SatDatepickerRangeValue<D>>value;\n            if (value.begin && value.end &&\n              this._dateAdapter.compareDate(value.begin, value.end) <= 0) {\n              this.beginDate = value.begin;\n              this.endDate = value.end;\n            } else {\n              this.beginDate = this.endDate = null;\n            }\n          } else {\n            this._selected = <D>value;\n          }\n        });\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an SatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n    if (this._beginDateSelected && this.selectFirstDateOnClose ) {\n      this._selectRange({begin: this._beginDateSelected, end: this._beginDateSelected});\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  setBeginDateSelected(date: D): void {\n    this._beginDateSelected = date;\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    // Usually this would be handled by `open` which ensures that we can only have one overlay\n    // open at a time, however since we reset the variables in async handlers some overlays\n    // may slip through if the user opens and closes multiple times in quick succession (e.g.\n    // by holding down the enter key).\n    if (this._dialogRef) {\n      this._dialogRef.close();\n    }\n\n    this._dialogRef = this._dialog.open<SatDatepickerContent<D>>(SatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n    this._setColor();\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<SatDatepickerContent<D>>(SatDatepickerContent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n      this._setColor();\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir,\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n    this._popupRef.overlayElement.setAttribute('role', 'dialog');\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => {\n        // Closing on alt + up is only valid when there's an input associated with the datepicker.\n        return event.keyCode === ESCAPE ||\n               (this._datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n      }))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .flexibleConnectedTo(this._datepickerInput.getConnectedOverlayOrigin())\n      .withTransformOriginOn('.mat-datepicker-content')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withLockedPosition()\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom'\n        },\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top'\n        },\n        {\n          originX: 'end',\n          originY: 'top',\n          overlayX: 'end',\n          overlayY: 'bottom'\n        }\n      ]);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Passes the current theme color along to the calendar overlay. */\n  private _setColor(): void {\n    const color = this.color;\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators,\n} from '@angular/forms';\nimport {DateAdapter} from '../datetime/date-adapter';\nimport {MAT_DATE_FORMATS, MatDateFormats} from '../datetime/date-formats';\nimport {ThemePalette} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs';\nimport {SatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/** @docs-private */\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => SatDatepickerInput),\n  multi: true\n};\n\n/** @docs-private */\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => SatDatepickerInput),\n  multi: true\n};\n\n/**\n * Special interface to input and output dates interval.\n */\nexport interface SatDatepickerRangeValue<D> {\n  begin: D | null;\n  end: D | null;\n}\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use SatDatepickerInputEvent instead.\n */\nexport class SatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: SatDatepickerRangeValue<D> | D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: SatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a SatDatepicker. */\n@Directive({\n  selector: 'input[satDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: SatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onBlur()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class SatDatepickerInput<D> implements ControlValueAccessor, OnDestroy, Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set satDatepicker(value: SatDatepicker<D>) {\n    if (!value) {\n      return;\n    }\n\n    this._datepicker = value;\n    this._datepicker._registerInput(this);\n    this._datepickerSubscription.unsubscribe();\n\n    this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((selected: D) => {\n      this.value = selected;\n      this._cvaOnChange(selected);\n      this._onTouched();\n      this.dateInput.emit(new SatDatepickerInputEvent(this, this._elementRef.nativeElement));\n      this.dateChange.emit(new SatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    });\n  }\n  _datepicker: SatDatepicker<D>;\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: SatDatepickerRangeValue<D> | D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): SatDatepickerRangeValue<D> | D | null {\n    return this._value;\n  }\n  set value(value:  SatDatepickerRangeValue<D> | D | null) {\n    if (value && value.hasOwnProperty('begin') && value.hasOwnProperty('end')) {\n      /** Range mode */\n      const rangeValue = <SatDatepickerRangeValue<D>>value;\n      rangeValue.begin = this._dateAdapter.deserialize(rangeValue.begin);\n      rangeValue.end = this._dateAdapter.deserialize(rangeValue.end);\n      this._lastValueValid = !rangeValue.begin || !rangeValue.end ||\n          this._dateAdapter.isValid(rangeValue.begin) && this._dateAdapter.isValid(rangeValue.end);\n      rangeValue.begin = this._getValidDateOrNull(rangeValue.begin);\n      rangeValue.end = this._getValidDateOrNull(rangeValue.end);\n      let oldDate = <SatDatepickerRangeValue<D> | null>this.value;\n      this._elementRef.nativeElement.value =\n          rangeValue && rangeValue.begin && rangeValue.end\n              ? this._dateAdapter.format(rangeValue.begin, this._dateFormats.display.dateInput) +\n                ' - ' +\n                this._dateAdapter.format(rangeValue.end, this._dateFormats.display.dateInput)\n              : '';\n      if (oldDate == null && rangeValue != null || oldDate != null && rangeValue == null ||\n          !this._dateAdapter.sameDate((<SatDatepickerRangeValue<D>>oldDate).begin,\n              rangeValue.begin) ||\n          !this._dateAdapter.sameDate((<SatDatepickerRangeValue<D>>oldDate).end,\n              rangeValue.end)) {\n        if (rangeValue.end && rangeValue.begin &&\n            this._dateAdapter\n                .compareDate(rangeValue.begin, rangeValue.end ) > 0) { // if begin > end\n          value = null;\n        }\n        this._value = value;\n        this._valueChange.emit(value);\n      }\n    } else {\n      /** Not range mode */\n      value = this._dateAdapter.deserialize(value);\n      this._lastValueValid = !value || this._dateAdapter.isValid(value);\n      value = this._getValidDateOrNull(value);\n      let oldDate = this.value;\n      this._value = value;\n      this._elementRef.nativeElement.value =\n          value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n      if (!this._dateAdapter.sameDate(<D>oldDate, value)) {\n        this._valueChange.emit(value);\n      }\n    }\n  }\n  private _value: SatDatepickerRangeValue<D> | D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    if (newValue && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<SatDatepickerInputEvent<D>> =\n      new EventEmitter<SatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<SatDatepickerInputEvent<D>> =\n      new EventEmitter<SatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<SatDatepickerRangeValue<D>|D|null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    if (this._datepicker.rangeMode && control.value) {\n      const beginDate =\n          this._getValidDateOrNull(this._dateAdapter.deserialize(control.value.begin));\n      const endDate =\n          this._getValidDateOrNull(this._dateAdapter.deserialize(control.value.end));\n      if (this.min) {\n        if (beginDate && this._dateAdapter.compareDate(this.min, beginDate) > 0) {\n          return {'matDatepickerMin': {'min': this.min, 'actual': beginDate}};\n        }\n        if (endDate && this._dateAdapter.compareDate(this.min, endDate) > 0) {\n          return {'matDatepickerMin': {'min': this.min, 'actual': endDate}};\n        }\n      }\n      return null;\n    }\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    if (this._datepicker.rangeMode && control.value) {\n      const beginDate =\n          this._getValidDateOrNull(this._dateAdapter.deserialize(control.value.begin));\n      const endDate = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value.end));\n      if (this.max) {\n        if (beginDate && this._dateAdapter.compareDate(this.max, beginDate) < 0 ) {\n          return {'matDatepickerMax': {'max': this.max, 'actual': beginDate}};\n        }\n        if (endDate && this._dateAdapter.compareDate(this.max, endDate) < 0) {\n          return {'matDatepickerMax': {'max': this.max, 'actual': endDate}};\n        }\n      }\n      return null;\n    }\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    if (this._datepicker.rangeMode && control.value) {\n      const beginDate =\n          this._getValidDateOrNull(this._dateAdapter.deserialize(control.value.begin));\n      const endDate = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value.end));\n      return !this._dateFilter || !beginDate && !endDate ||\n          this._dateFilter(beginDate) && this._dateFilter(endDate) ?\n        null : {'matDatepickerFilter': true};\n    }\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The form control validator for the date filter. */\n  private _rangeValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    if (this._datepicker.rangeMode && control.value) {\n      const beginDate =\n          this._getValidDateOrNull(this._dateAdapter.deserialize(control.value.begin));\n      const endDate = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value.end));\n      return !beginDate || !endDate || this._dateAdapter.compareDate(beginDate, endDate) <= 0 ?\n        null : {'matDatepickerRange': true};\n    }\n    return null;\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator,\n            this._filterValidator, this._rangeValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef<HTMLInputElement>,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  writeValue(value: SatDatepickerRangeValue<D> | D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    const isAltDownArrow = event.altKey && event.keyCode === DOWN_ARROW;\n\n    if (this._datepicker && isAltDownArrow && !this._elementRef.nativeElement.readOnly) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date: SatDatepickerRangeValue<D>|D|null = null;\n    if (this._datepicker.rangeMode) {\n      const parts = value.split('-');\n      if (parts.length > 1) {\n          const position = Math.floor(parts.length / 2);\n          const beginDateString = parts.slice(0, position).join('-');\n          const endDateString = parts.slice(position).join('-');\n          let beginDate = this._dateAdapter.parse(beginDateString,\n              this._dateFormats.parse.dateInput);\n          let endDate = this._dateAdapter.parse(endDateString, this._dateFormats.parse.dateInput);\n          this._lastValueValid = !beginDate || !endDate || this._dateAdapter.isValid(beginDate) &&\n                                                           this._dateAdapter.isValid(endDate);\n          beginDate = this._getValidDateOrNull(beginDate);\n          endDate = this._getValidDateOrNull(endDate);\n          if (beginDate && endDate) {\n            date = <SatDatepickerRangeValue<D>>{begin: beginDate, end: endDate};\n          }\n      }\n    } else {\n      date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n      this._lastValueValid = !date || this._dateAdapter.isValid(date);\n      date = this._getValidDateOrNull(date);\n    }\n    this._value = date;\n    this._cvaOnChange(date);\n    this._valueChange.emit(date);\n    this.dateInput.emit(new SatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  _onChange() {\n    this.dateChange.emit(new SatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  _getThemePalette(): ThemePalette {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /** Handles blur events on the input. */\n  _onBlur() {\n    // Reformat the input only if we have a valid value.\n    if (this.value) {\n      this._formatValue(this.value);\n    }\n\n    this._onTouched();\n  }\n\n  /** Formats a value and sets it on the input element. */\n  private _formatValue(value: SatDatepickerRangeValue<D> | D | null) {\n      if (value && value.hasOwnProperty('begin') && value.hasOwnProperty('end')) {\n          value = value as SatDatepickerRangeValue<D>;\n          this._elementRef.nativeElement.value =\n              value && value.begin && value.end\n                  ? this._dateAdapter.format(value.begin, this._dateFormats.display.dateInput) +\n                  ' - ' +\n                  this._dateAdapter.format(value.end, this._dateFormats.display.dateInput)\n                  : ''\n      }\n      else {\n            value = value as D | null\n          this._elementRef.nativeElement.value =\n              value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n      }\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {MatButton} from '@angular/material/button';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {SatDatepicker} from './datepicker';\nimport {SatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class SatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'sat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    // Always set the tabindex to -1 so that it doesn't overlap with any custom tabindex the\n    // consumer may have provided, while still being able to receive focus.\n    '[attr.tabindex]': '-1',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n    '(focus)': '_button.focus()',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: SatDatepicker<D>;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    if (this._disabled === undefined && this.datepicker) {\n      return this.datepicker.disabled;\n    }\n\n    return !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Whether ripples on the toggle should be disabled. */\n  @Input() disableRipple: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(SatDatepickerToggleIcon) _customIcon: SatDatepickerToggleIcon;\n\n  /** Underlying button element. */\n  @ViewChild('button') _button: MatButton;\n\n  constructor(\n    public _intl: SatDatepickerIntl,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Attribute('tabindex') defaultTabIndex: string) {\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['datepicker']) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {SatCalendar, SatCalendarHeader, SatCalendarFooter} from './calendar';\nimport {SatCalendarBody} from './calendar-body';\nimport {\n  SatDatepicker,\n  SatDatepickerContent,\n  MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './datepicker';\nimport {SatDatepickerInput} from './datepicker-input';\nimport {SatDatepickerIntl} from './datepicker-intl';\nimport {SatDatepickerToggle, SatDatepickerToggleIcon} from './datepicker-toggle';\nimport {SatMonthView} from './month-view';\nimport {SatMultiYearView} from './multi-year-view';\nimport {SatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n    PortalModule,\n  ],\n  exports: [\n    SatCalendar,\n    SatCalendarBody,\n    SatDatepicker,\n    SatDatepickerContent,\n    SatDatepickerInput,\n    SatDatepickerToggle,\n    SatDatepickerToggleIcon,\n    SatMonthView,\n    SatYearView,\n    SatMultiYearView,\n    SatCalendarHeader,\n    SatCalendarFooter,\n  ],\n  declarations: [\n    SatCalendar,\n    SatCalendarBody,\n    SatDatepicker,\n    SatDatepickerContent,\n    SatDatepickerInput,\n    SatDatepickerToggle,\n    SatDatepickerToggleIcon,\n    SatMonthView,\n    SatYearView,\n    SatMultiYearView,\n    SatCalendarHeader,\n    SatCalendarFooter,\n  ],\n  providers: [\n    SatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n  ],\n  entryComponents: [\n    SatDatepickerContent,\n    SatCalendarHeader,\n    SatCalendarFooter,\n  ]\n})\nexport class SatDatepickerModule {}\n"]}