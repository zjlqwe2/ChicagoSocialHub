{"version":3,"file":"month-view.d.ts","sources":["month-view.d.ts"],"names":[],"mappingssourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AfterContentInit, ChangeDetectorRef, EventEmitter } from '@angular/core';\nimport { DateAdapter } from '../datetime/date-adapter';\nimport { MatDateFormats } from '../datetime/date-formats';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { SatCalendarBody, SatCalendarCell, SatCalendarCellCssClasses } from './calendar-body';\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\nexport declare class SatMonthView<D> implements AfterContentInit {\n    private _changeDetectorRef;\n    private _dateFormats;\n    _dateAdapter: DateAdapter<D>;\n    private _dir?;\n    /** Current start of interval. */\n    beginDate: D | null;\n    private _beginDate;\n    /** Current end of interval. */\n    endDate: D | null;\n    private _endDate;\n    /** Allow selecting range of dates. */\n    rangeMode: boolean;\n    /** Enables datepicker closing after selection */\n    closeAfterSelection: boolean;\n    /** First day of interval. */\n    _beginDateNumber: number | null;\n    _endDateNumber: number | null;\n    /** Whenever full month is inside dates interval. */\n    _rangeFull: boolean | null;\n    /** Whenever user already selected start of dates interval. */\n    beginDateSelected: D | null;\n    /** Whenever user already selected start of dates interval. An inner property that avoid asynchronous problems */\n    _beginDateSelected: D | null;\n    /**\n     * The date to display in this month view (everything other than the month and year is ignored).\n     */\n    activeDate: D;\n    private _activeDate;\n    /** The currently selected date. */\n    selected: D | null;\n    private _selected;\n    /** The minimum selectable date. */\n    minDate: D | null;\n    private _minDate;\n    /** The maximum selectable date. */\n    maxDate: D | null;\n    private _maxDate;\n    /** Function used to filter which dates are selectable. */\n    dateFilter: (date: D) => boolean;\n    /** Function that can be used to add custom CSS classes to dates. */\n    dateClass: (date: D) => SatCalendarCellCssClasses;\n    /** Emits when a new date is selected. */\n    readonly selectedChange: EventEmitter<D | null>;\n    /** Emits when any date is selected. */\n    readonly _userSelection: EventEmitter<void>;\n    /** Emits when any date is activated. */\n    readonly activeDateChange: EventEmitter<D>;\n    /** The body of calendar table */\n    _matCalendarBody: SatCalendarBody;\n    /** The label for this month (e.g. \"January 2017\"). */\n    _monthLabel: string;\n    /** Grid of calendar cells representing the dates of the month. */\n    _weeks: SatCalendarCell[][];\n    /** The number of blank cells in the first row before the 1st of the month. */\n    _firstWeekOffset: number;\n    /**\n     * The date of the month that the currently selected Date falls on.\n     * Null if the currently selected Date is in another month.\n     */\n    _selectedDate: number | null;\n    /** The date of the month that today falls on. Null if today is in another month. */\n    _todayDate: number | null;\n    /** The names of the weekdays. */\n    _weekdays: {\n        long: string;\n        narrow: string;\n    }[];\n    constructor(_changeDetectorRef: ChangeDetectorRef, _dateFormats: MatDateFormats, _dateAdapter: DateAdapter<D>, _dir?: Directionality);\n    ngAfterContentInit(): void;\n    /** Handles when a new date is selected. */\n    _dateSelected(date: number): void;\n    /** Handles keydown events on the calendar body when calendar is in month view. */\n    _handleCalendarBodyKeydown(event: KeyboardEvent): void;\n    /** Initializes this month view. */\n    _init(): void;\n    /** Focuses the active cell after the microtask queue is empty. */\n    _focusActiveCell(): void;\n    /** Creates SatCalendarCells for the dates in this month. */\n    private _createWeekCells;\n    /** Date filter for the month */\n    private _shouldEnableDate;\n    /**\n     * Gets the date in this month that the given Date falls on.\n     * Returns null if the given Date is in another month.\n     */\n    private _getDateInCurrentMonth;\n    /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n    private _hasSameMonthAndYear;\n    /**\n     * @param obj The object to check.\n     * @returns The given object if it is both a date instance and valid, otherwise null.\n     */\n    private _getValidDateOrNull;\n    /** Determines whether the user has the RTL layout direction. */\n    private _isRtl;\n    /** Updates range full parameter on each begin or end of interval update.\n     * Necessary to display calendar-body correctly\n     */\n    private updateRangeSpecificValues;\n}\n"]}